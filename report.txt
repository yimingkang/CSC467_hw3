CSC467 Lab4
=================================================
Student 1: Yiming Kang
Student #: 998676730
    - register.c, instructions.c, testing, some of codegen.c

Student 2: TianYu Li
Student #: 999107149
    - most of codegen.c, testing

Approach:  
We generate the assembly code by traversing AST constructed in the previous lab. Actions to take at each node is defined in `codegen.c::genCode()` which uses `register.c` to track and allocate/deallocate registers to variables. `instruction.c` is used to generate various instructions given src and dest registers.

Implementation detail:
register.c:
    - Registers are allocated on a stack, each register will be assigned a unique ID
    - Registers are deallocated by calling dealloc(int pos) where every register allocated after pos will be reused in the future
    - Position of the next register number is saved before entering a new scope, registers including and after it can be safetly reused when the scope exits.

Challenges:  
:TODO:

Testing:  
All test cases are located in ./tests/lab4_test/ which contains the following test cases. `make && make test` to run all tests

if_else.frag:
    - tests whether code generator outputs the correct assembly to handle if-else statement  
nested_if.frag:
    - tests nested if with variables of the same name declared in scope, wheter registers are reused  
ops.frag:  
    - tests whether arithmetic and logical operations are produced correctly  
expression.frag:  
    - tests whether expressions are generated correctly including precedence and tmpVar reuse  
general_test.frag:  
    - general variable creation  
    - assignment  
    - binary operators (both arithmetic and logical)  
    - unary operators (both arithmetic and logical)  
shader.frag, phong.frag:   
    - demo code, compiled code should run and render expected images  
invalid*.frag:  
    - invalid code (syntax or semantics error), this should not compile  
